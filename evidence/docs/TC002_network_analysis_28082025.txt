===============================================
SAUCEDEMO - AN√ÅLISIS DE NETWORK REQUESTS
===============================================
Caso de Prueba: TC002 - Intento de Login Usuario Bloqueado
Fecha: 28/08/2025
URL: https://www.saucedemo.com
Usuario: locked_out_user
Navegador: Chrome DevTools - Pesta√±a Red
===============================================

CONFIGURACI√ìN DE CAPTURA:
‚úì Mantener registro: Habilitado
‚úì Inhabilitar cach√©: Habilitado  
‚úì Filtros: Todos los tipos activos
‚úì Vista general: Habilitada

===============================================
RESULTADOS DE NETWORK MONITORING:
===============================================

üìä ESTAD√çSTICAS GENERALES:
- Solicitudes HTTP capturadas: 0/2
- Datos transferidos: 0.0 kB/0.0 kB
- Recursos cargados: 0.0 kB

üîç REQUESTS ESPEC√çFICOS DE AUTENTICACI√ìN:
- No se detectaron requests HTTP de login tradicionales
- No se observaron llamadas a endpoints /login o /auth
- No se registraron requests POST de autenticaci√≥n

‚ö†Ô∏è OBSERVACIONES T√âCNICAS:
- SauceDemo parece usar autenticaci√≥n del lado cliente (frontend)
- Validaci√≥n de credenciales posiblemente implementada en JavaScript
- No hay comunicaci√≥n con servidor para proceso de login
- Arquitectura de Single Page Application (SPA)

üî¥ ERRORES DE RED DETECTADOS:
- Multiple intentos fallidos a Backtrace.io (servicio de logging externo)
- Error 503: Service Unavailable en requests de logging
- Pol√≠tica CORS bloqueando requests externos
- Errores originados desde Login.jsx durante proceso de env√≠o

===============================================
IMPLICACIONES PARA TESTING:
===============================================

‚úÖ VALIDACIONES CONFIRMADAS:
- Sistema detecta usuario bloqueado sin requests de servidor
- L√≥gica de autenticaci√≥n implementada localmente
- Manejo de errores funcional (logging activo)
- No hay exposici√≥n de datos sensibles en network traffic

üìù CONSIDERACIONES DE SEGURIDAD:
- Autenticaci√≥n frontend-only es menos segura que server-side
- No se observan headers de seguridad en requests
- Validaci√≥n de usuarios parece estar hardcodeada en cliente
- Recomendable validar comportamiento en entorno de producci√≥n real

===============================================
CONCLUSIONES PARA TC002:
===============================================

üéØ COMPORTAMIENTO OBSERVADO:
- Usuario bloqueado correctamente rechazado a nivel de aplicaci√≥n
- No se generaron requests maliciosos o inesperados
- Sistema de logging de errores funcionando (aunque con fallos de conectividad)
- Aplicaci√≥n mantuvo estado seguro durante test de usuario bloqueado

üìà VALOR DE LA EVIDENCIA:
- Confirma que no hay bypass de autenticaci√≥n via network
- Demuestra arquitectura de la aplicaci√≥n (SPA)
- Valida que el bloqueo es efectivo sin comunicaci√≥n servidor
- Evidencia t√©cnica de comportamiento esperado seg√∫n REQ-AUTH-002

===============================================